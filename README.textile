h1. What it is

A Rakefile to simplify previewing and deploying "jekyll":http://jekyllrb.com websites.

Jekyll has introduced many improvements since this Rakefile was first started.  There are, therefore, some overlaps with functions now natively provided by Jekyll, like, for instance, support for compass compilation and deployment on non-root urls.  You might want to have a look at the Jekyll documentation before deciding whether this Rakefile is for you.

This rakefile still has its uses if you are deploying your Jekyll websites using rsync on non-root urls.

h1. Installation

1. Download this repository
2. Put the files in your jekyll installation
3. Set the variables in @_rake_configuration.yml@
4. Start using it!

*Note.* I use two separate files to keep the @Rakefile@ independent of the configuration; it helps when you are managing more than one website with jekyll.  However, if you prefer, you can forget about the @_rake_configuration.yml@ file and set the variables directly in the @Rakefile@.


h1. Main Features

* Management of different configurations for preview and deployment
* Automated deployment through rsync
* Ready-made tasks for common operations (e.g. creating a post, checking links)
* List changes since last deploy
* Create a post with changes since last deploy

h1. Typical Usage Scenario

<pre>
rake preview
rake deploy
</pre>

h1. Managing Deployment

This Rakefile makes Jekyll read @_config.yml@ when previewing (this is rather simple, since it is the standard behavior of Jekyll).  When deploying, it makes Jekyll read the content of both @_config.yml@ and @_config_deploy.yml@.  This allows to specify different settings for deployment.

Moreover, a special variable @deploy_dir@ can be used in @_config_deploy.yml@ to specify the directory where the Jekyll site has to be deployed using rsync.

For instance, @_config_deploy.yml@ could look like:

<pre>
baseurl: http://www.example.com/some/subdir
deploy_dir: webuser@example.com:/some/directory
</pre>

Previous versions of this Rakefile used the variable @site.url@ for specifying the url.  You can keep the old convention, simply by replacing @baseurl@ with @url@ in @_config_deploy.yml@.  I.e.:

<pre>
baseurl: http://www.example.com/some/subdir
deploy_dir: webuser@example.com:/some/directory
</pre>

h1. Commands

The commands made available are:

<pre>
rake build                                     # Build for deployment (but do not deploy)
rake check_links                               # Check links for site already running on localhost:4000
rake clean                                     # Clean up generated site
rake create_post[title,date,category,content]  # Create a post
rake deploy                                    # Build and deploy to remote server
rake list_changes                              # Print the file changed since last deploy
rake post_changes                              # Create a post listing all changes since last deploy
rake preview                                   # Preview on local machine (server with --auto)
</pre>

h1. Change Log

* version 2.0 changes quite radically the interface, exploiting some of the changes made to Jekyll.  The @Rakefile@ does not mess up with @_config.yml@ anymore, but it expects a @_config_deploy.yml@ file to contain the deployment directives, including the @deploy_dir@ (using rsync syntax).  Integration with @git@ checks that the local repository is in sync with the remote repository and optionally pushes all changes to the repository after a commit.

h1. Caveats

If you do not put the following directive in your @_config.yml@ file:

bc. exclude: ['Rakefile']

the @Rakefile@ will end up in your website.  (It shouldn't do any harm if you publish it.)


h1. License

Distributed under the terms of the "MIT License":http://opensource.org/licenses/MIT
